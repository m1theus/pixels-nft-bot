{"version":3,"file":"Client.js","sources":["../../src/Client.ts"],"sourcesContent":["import { post, get } from \"httpie\";\n\nimport { ServerError } from './errors/ServerError';\nimport { Room, RoomAvailable } from './Room';\nimport { SchemaConstructor } from './serializer/SchemaSerializer';\n\nexport type JoinOptions = any;\n\nexport class MatchMakeError extends Error {\n    code: number;\n    constructor(message: string, code: number) {\n        super(message);\n        this.code = code;\n        Object.setPrototypeOf(this, MatchMakeError.prototype);\n    }\n}\n\n// - React Native does not provide `window.location`\n// - Cocos Creator (Native) does not provide `window.location.hostname`\nconst DEFAULT_ENDPOINT = (typeof (window) !== \"undefined\" &&  typeof (window?.location?.hostname) !== \"undefined\")\n    ? `${window.location.protocol.replace(\"http\", \"ws\")}//${window.location.hostname}${(window.location.port && `:${window.location.port}`)}`\n    : \"ws://127.0.0.1:2567\";\n\nexport interface EndpointSettings {\n    hostname: string,\n    secure: boolean,\n    port?: number,\n    pathname?: string,\n}\n\nexport class Client {\n    protected settings: EndpointSettings;\n\n    constructor(settings: string | EndpointSettings = DEFAULT_ENDPOINT) {\n        if (typeof (settings) === \"string\") {\n            //\n            // endpoint by url\n            //\n            const url = new URL(settings);\n            const secure = (url.protocol === \"https:\" || url.protocol === \"wss:\");\n            const port = Number(url.port || (secure ? 443 : 80));\n\n            this.settings = {\n                hostname: url.hostname,\n                pathname: url.pathname !== \"/\" ? url.pathname : \"\",\n                port,\n                secure\n            };\n\n        } else {\n            //\n            // endpoint by settings\n            //\n            if (settings.port === undefined) {\n                settings.port = (settings.secure) ? 443 : 80;\n            }\n            if (settings.pathname === undefined) {\n                settings.pathname = \"\";\n            }\n            this.settings = settings;\n        }\n    }\n\n    public async joinOrCreate<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('joinOrCreate', roomName, options, rootSchema);\n    }\n\n    public async create<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('create', roomName, options, rootSchema);\n    }\n\n    public async join<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('join', roomName, options, rootSchema);\n    }\n\n    public async joinById<T>(roomId: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('joinById', roomId, options, rootSchema);\n    }\n\n    /**\n     * Re-establish connection with a room this client was previously connected to.\n     *\n     * @param reconnectionToken The `room.reconnectionToken` from previously connected room.\n     * @param rootSchema (optional) Concrete root schema definition\n     * @returns Promise<Room>\n     */\n    public async reconnect<T>(reconnectionToken: string, rootSchema?: SchemaConstructor<T>) {\n        if (typeof (reconnectionToken) === \"string\" && typeof (rootSchema) === \"string\") {\n            throw new Error(\"DEPRECATED: .reconnect() now only accepts 'reconnectionToken' as argument.\\nYou can get this token from previously connected `room.reconnectionToken`\");\n        }\n        const [roomId, token] = reconnectionToken.split(\":\");\n        return await this.createMatchMakeRequest<T>('reconnect', roomId, { reconnectionToken: token }, rootSchema);\n    }\n\n    public async getAvailableRooms<Metadata = any>(roomName: string = \"\"): Promise<RoomAvailable<Metadata>[]> {\n        return (\n            await get(this.getHttpEndpoint(`${roomName}`), {\n                headers: {\n                    'Accept': 'application/json'\n                }\n            })\n        ).data;\n    }\n\n    public async consumeSeatReservation<T>(\n        response: any,\n        rootSchema?: SchemaConstructor<T>,\n        reuseRoomInstance?: Room // used in devMode\n    ): Promise<Room<T>> {\n        const room = this.createRoom<T>(response.room.name, rootSchema);\n        room.roomId = response.room.roomId;\n        room.sessionId = response.sessionId;\n\n        const options: any = { sessionId: room.sessionId };\n\n        // forward \"reconnection token\" in case of reconnection.\n        if (response.reconnectionToken) {\n            options.reconnectionToken = response.reconnectionToken;\n        }\n\n        const targetRoom = reuseRoomInstance || room;\n        room.connect(this.buildEndpoint(response.room, options), response.devMode && (async () => {\n            console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x1F504)} Re-establishing connection with room id '${room.roomId}'...`); // 🔄\n\n            let retryCount = 0;\n            let retryMaxRetries = 8;\n\n            const retryReconnection = async () => {\n                retryCount++;\n\n                try {\n                    await this.consumeSeatReservation(response, rootSchema, targetRoom);\n                    console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x2705)} Successfully re-established connection with room '${room.roomId}'`); // ✅\n\n                } catch (e) {\n                    if (retryCount < retryMaxRetries) {\n                        console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x1F504)} retrying... (${retryCount} out of ${retryMaxRetries})`); // 🔄\n                        setTimeout(retryReconnection, 2000);\n\n                    } else {\n                        console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x274C)} Failed to reconnect. Is your server running? Please check server logs.`); // ❌\n                    }\n                }\n            };\n\n            setTimeout(retryReconnection, 2000);\n        }), targetRoom);\n\n        return new Promise((resolve, reject) => {\n            const onError = (code, message) => reject(new ServerError(code, message));\n            targetRoom.onError.once(onError);\n\n            targetRoom['onJoin'].once(() => {\n                targetRoom.onError.remove(onError);\n                resolve(targetRoom);\n            });\n        });\n    }\n\n    protected async createMatchMakeRequest<T>(\n        method: string,\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>,\n        reuseRoomInstance?: Room,\n    ) {\n        const response = (\n            await post(this.getHttpEndpoint(`${method}/${roomName}`), {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(options)\n            })\n        ).data;\n\n        if (response.error) {\n            throw new MatchMakeError(response.error, response.code);\n        }\n\n        // forward reconnection token during \"reconnect\" methods.\n        if (method === \"reconnect\") {\n            response.reconnectionToken = options.reconnectionToken;\n        }\n\n        return await this.consumeSeatReservation<T>(response, rootSchema, reuseRoomInstance);\n    }\n\n    protected createRoom<T>(roomName: string, rootSchema?: SchemaConstructor<T>) {\n        return new Room<T>(roomName, rootSchema);\n    }\n\n    protected buildEndpoint(room: any, options: any = {}) {\n        const params = [];\n\n        for (const name in options) {\n            if (!options.hasOwnProperty(name)) {\n                continue;\n            }\n            params.push(`${name}=${options[name]}`);\n        }\n\n        let endpoint = (this.settings.secure)\n            ? \"wss://\"\n            : \"ws://\"\n\n        if (room.publicAddress) {\n            endpoint += `${room.publicAddress}`;\n\n        } else {\n            endpoint += `${this.settings.hostname}${this.getEndpointPort()}${this.settings.pathname}`;\n        }\n\n        return `${endpoint}/${room.processId}/${room.roomId}?${params.join('&')}`;\n    }\n\n    protected getHttpEndpoint(segments: string = '') {\n        return `${(this.settings.secure) ? \"https\" : \"http\"}://${this.settings.hostname}${this.getEndpointPort()}${this.settings.pathname}/matchmake/${segments}`;\n    }\n\n    protected getEndpointPort() {\n        return (this.settings.port !== 80 && this.settings.port !== 443)\n            ? `:${this.settings.port}`\n            : \"\";\n    }\n}\n"],"names":["__extends","get","__awaiter","ServerError","post","Room"],"mappings":"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"}