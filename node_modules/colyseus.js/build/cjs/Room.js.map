{"version":3,"file":"Room.js","sources":["../../src/Room.ts"],"sourcesContent":["import * as msgpack from './msgpack';\n\nimport { Connection } from './Connection';\nimport { Protocol, utf8Length, utf8Read } from './Protocol';\nimport { getSerializer, Serializer } from './serializer/Serializer';\n\n// The unused imports here are important for better `.d.ts` file generation\n// (Later merged with `dts-bundle-generator`)\nimport { createNanoEvents } from './core/nanoevents';\nimport { createSignal } from './core/signal';\n\nimport { Context, decode, encode, Schema } from '@colyseus/schema';\nimport { SchemaConstructor, SchemaSerializer } from './serializer/SchemaSerializer';\nimport { CloseCode } from './errors/ServerError';\n\nexport interface RoomAvailable<Metadata = any> {\n    name: string;\n    roomId: string;\n    clients: number;\n    maxClients: number;\n    metadata?: Metadata;\n}\n\nexport class Room<State= any> {\n    public roomId: string;\n    public sessionId: string;\n    public reconnectionToken: string;\n\n    public name: string;\n    public connection: Connection;\n\n    // Public signals\n    public onStateChange = createSignal<(state: State) => void>();\n    public onError = createSignal<(code: number, message?: string) => void>();\n    public onLeave = createSignal<(code: number) => void>();\n    protected onJoin = createSignal();\n\n    public serializerId: string;\n    public serializer: Serializer<State>;\n\n    protected hasJoined: boolean = false;\n\n    // TODO: remove me on 1.0.0\n    protected rootSchema: SchemaConstructor<State>;\n\n    protected onMessageHandlers = createNanoEvents();\n\n    constructor(name: string, rootSchema?: SchemaConstructor<State>) {\n        this.roomId = null;\n        this.name = name;\n\n        if (rootSchema) {\n            this.serializer = new (getSerializer(\"schema\"));\n            this.rootSchema = rootSchema;\n            (this.serializer as SchemaSerializer).state = new rootSchema();\n        }\n\n        this.onError((code, message) => console.warn?.(`colyseus.js - onError => (${code}) ${message}`));\n        this.onLeave(() => this.removeAllListeners());\n    }\n\n    // TODO: deprecate me on version 1.0\n    get id() { return this.roomId; }\n\n    public connect(\n        endpoint: string,\n        devModeCloseCallback?: () => void,\n        room: Room = this // when reconnecting on devMode, re-use previous room intance for handling events.\n    ) {\n        const connection = new Connection();\n        room.connection = connection;\n\n        connection.events.onmessage = Room.prototype.onMessageCallback.bind(room);\n        connection.events.onclose = function (e: CloseEvent) {\n            if (!room.hasJoined) {\n                console.warn?.(`Room connection was closed unexpectedly (${e.code}): ${e.reason}`);\n                room.onError.invoke(e.code, e.reason);\n                return;\n            }\n            if (e.code === CloseCode.DEVMODE_RESTART && devModeCloseCallback) {\n                devModeCloseCallback();\n            } else {\n                room.onLeave.invoke(e.code);\n                room.destroy();\n            }\n        };\n        connection.events.onerror = function (e: CloseEvent) {\n            console.warn?.(`Room, onError (${e.code}): ${e.reason}`);\n            room.onError.invoke(e.code, e.reason);\n        };\n        connection.connect(endpoint);\n    }\n\n    public leave(consented: boolean = true): Promise<number> {\n        return new Promise((resolve) => {\n            this.onLeave((code) => resolve(code));\n\n            if (this.connection) {\n                if (consented) {\n                    this.connection.send([Protocol.LEAVE_ROOM]);\n\n                } else {\n                    this.connection.close();\n                }\n\n            } else {\n                this.onLeave.invoke(CloseCode.CONSENTED);\n            }\n        });\n    }\n\n    public onMessage<T = any>(\n        type: \"*\",\n        callback: (type: string | number | Schema, message: T) => void\n    )\n    public onMessage<T extends (typeof Schema & (new (...args: any[]) => any))>(\n        type: T,\n        callback: (message: InstanceType<T>) => void\n    )\n    public onMessage<T = any>(\n        type: string | number,\n        callback: (message: T) => void\n    )\n    public onMessage(\n        type: '*' | string | number | typeof Schema,\n        callback: (...args: any[]) => void\n    ) {\n        return this.onMessageHandlers.on(this.getMessageHandlerKey(type), callback);\n    }\n\n    public send(type: string | number, message?: any): void {\n        const initialBytes: number[] = [Protocol.ROOM_DATA];\n\n        if (typeof(type) === \"string\") {\n            encode.string(initialBytes, type);\n\n        } else {\n            encode.number(initialBytes, type);\n        }\n\n        let arr: Uint8Array;\n\n        if (message !== undefined) {\n            const encoded = msgpack.encode(message);\n            arr = new Uint8Array(initialBytes.length + encoded.byteLength);\n            arr.set(new Uint8Array(initialBytes), 0);\n            arr.set(new Uint8Array(encoded), initialBytes.length);\n\n        } else {\n            arr = new Uint8Array(initialBytes);\n        }\n\n        this.connection.send(arr.buffer);\n    }\n\n    public sendBytes(type: string | number, bytes: number[] | ArrayBufferLike) {\n        const initialBytes: number[] = [Protocol.ROOM_DATA_BYTES];\n\n        if (typeof(type) === \"string\") {\n            encode.string(initialBytes, type);\n\n        } else {\n            encode.number(initialBytes, type);\n        }\n\n        let arr: Uint8Array;\n        arr = new Uint8Array(initialBytes.length + ((bytes as ArrayBufferLike).byteLength || (bytes as number[]).length));\n        arr.set(new Uint8Array(initialBytes), 0);\n        arr.set(new Uint8Array(bytes), initialBytes.length);\n\n        this.connection.send(arr.buffer);\n    }\n\n    public get state (): State {\n        return this.serializer.getState();\n    }\n\n    public removeAllListeners() {\n        this.onJoin.clear();\n        this.onStateChange.clear();\n        this.onError.clear();\n        this.onLeave.clear();\n        this.onMessageHandlers.events = {};\n    }\n\n    protected onMessageCallback(event: MessageEvent) {\n        const bytes = Array.from(new Uint8Array(event.data))\n        const code = bytes[0];\n\n        if (code === Protocol.JOIN_ROOM) {\n            let offset = 1;\n\n            const reconnectionToken = utf8Read(bytes, offset);\n            offset += utf8Length(reconnectionToken);\n\n            this.serializerId = utf8Read(bytes, offset);\n            offset += utf8Length(this.serializerId);\n\n            // Instantiate serializer if not locally available.\n            if (!this.serializer) {\n                const serializer = getSerializer(this.serializerId)\n                this.serializer = new serializer();\n            }\n\n            if (bytes.length > offset && this.serializer.handshake) {\n                this.serializer.handshake(bytes, { offset });\n            }\n\n            this.reconnectionToken = `${this.roomId}:${reconnectionToken}`;\n\n            this.hasJoined = true;\n            this.onJoin.invoke();\n\n            // acknowledge successfull JOIN_ROOM\n            this.connection.send([Protocol.JOIN_ROOM]);\n\n        } else if (code === Protocol.ERROR) {\n            const it: decode.Iterator = { offset: 1 };\n\n            const code = decode.number(bytes, it);\n            const message = decode.string(bytes, it);\n\n            this.onError.invoke(code, message);\n\n        } else if (code === Protocol.LEAVE_ROOM) {\n            this.leave();\n\n        } else if (code === Protocol.ROOM_DATA_SCHEMA) {\n            const it = { offset: 1 };\n\n            const context: Context = (this.serializer.getState() as any).constructor._context;\n            const type = context.get(decode.number(bytes, it));\n\n            const message: Schema = new (type as any)();\n            message.decode(bytes, it);\n\n            this.dispatchMessage(type, message);\n\n        } else if (code === Protocol.ROOM_STATE) {\n            bytes.shift(); // drop `code` byte\n            this.setState(bytes);\n\n        } else if (code === Protocol.ROOM_STATE_PATCH) {\n            bytes.shift(); // drop `code` byte\n            this.patch(bytes);\n\n        } else if (code === Protocol.ROOM_DATA) {\n            const it: decode.Iterator = { offset: 1 };\n\n            const type = (decode.stringCheck(bytes, it))\n                ? decode.string(bytes, it)\n                : decode.number(bytes, it);\n\n            const message = (bytes.length > it.offset)\n                ? msgpack.decode(event.data, it.offset)\n                : undefined;\n\n            this.dispatchMessage(type, message);\n\n        } else if (code === Protocol.ROOM_DATA_BYTES) {\n            const it: decode.Iterator = { offset: 1 };\n\n            const type = (decode.stringCheck(bytes, it))\n                ? decode.string(bytes, it)\n                : decode.number(bytes, it);\n\n            this.dispatchMessage(type, new Uint8Array(bytes.slice(it.offset)));\n        }\n    }\n\n    protected setState(encodedState: number[]): void {\n        this.serializer.setState(encodedState);\n        this.onStateChange.invoke(this.serializer.getState());\n    }\n\n    protected patch(binaryPatch: number[]) {\n        this.serializer.patch(binaryPatch);\n        this.onStateChange.invoke(this.serializer.getState());\n    }\n\n    private dispatchMessage(type: string | number | typeof Schema, message: any) {\n        const messageType = this.getMessageHandlerKey(type);\n\n        if (this.onMessageHandlers.events[messageType]) {\n            this.onMessageHandlers.emit(messageType, message);\n\n        } else if (this.onMessageHandlers.events['*']) {\n            this.onMessageHandlers.emit('*', type, message);\n\n        } else {\n            console.warn?.(`colyseus.js: onMessage() not registered for type '${type}'.`);\n        }\n    }\n\n    private destroy () {\n        if (this.serializer) {\n            this.serializer.teardown();\n        }\n    }\n\n    private getMessageHandlerKey(type: string | number | typeof Schema): string {\n        switch (typeof(type)) {\n            // typeof Schema\n            case \"function\": return `$${(type as typeof Schema)._typeid}`;\n\n            // string\n            case \"string\": return type;\n\n            // number\n            case \"number\": return `i${type}`;\n\n            default: throw new Error(\"invalid message type.\");\n        }\n    }\n\n}\n"],"names":["createSignal","createNanoEvents","getSerializer","Connection","CloseCode","Protocol","encode","msgpack.encode","utf8Read","utf8Length","decode","msgpack.decode"],"mappings":"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"}