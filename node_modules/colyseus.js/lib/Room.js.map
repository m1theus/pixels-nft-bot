{"version":3,"file":"Room.js","sourceRoot":"","sources":["../src/Room.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mDAAqC;AAErC,6CAA0C;AAC1C,yCAA4D;AAC5D,wDAAoE;AAEpE,2EAA2E;AAC3E,6CAA6C;AAC7C,kDAAqD;AACrD,0CAA6C;AAE7C,6CAAmE;AAEnE,sDAAiD;AAUjD,MAAa,IAAI;IAwBb,YAAY,IAAY,EAAE,UAAqC;QAhB/D,iBAAiB;QACV,kBAAa,GAAG,IAAA,qBAAY,GAA0B,CAAC;QACvD,YAAO,GAAG,IAAA,qBAAY,GAA4C,CAAC;QACnE,YAAO,GAAG,IAAA,qBAAY,GAA0B,CAAC;QAC9C,WAAM,GAAG,IAAA,qBAAY,GAAE,CAAC;QAKxB,cAAS,GAAY,KAAK,CAAC;QAK3B,sBAAiB,GAAG,IAAA,6BAAgB,GAAE,CAAC;QAG7C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAA,0BAAa,EAAC,QAAQ,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC5B,IAAI,CAAC,UAA+B,CAAC,KAAK,GAAG,IAAI,UAAU,EAAE,CAAC;SAClE;QAED,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,WAAC,OAAA,MAAA,OAAO,CAAC,IAAI,wDAAG,6BAA6B,IAAI,KAAK,OAAO,EAAE,CAAC,CAAA,EAAA,CAAC,CAAC;QACjG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,oCAAoC;IACpC,IAAI,EAAE,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAEzB,OAAO,CACV,QAAgB,EAChB,oBAAiC,EACjC,OAAa,IAAI,CAAC,kFAAkF;;QAEpG,MAAM,UAAU,GAAG,IAAI,uBAAU,EAAE,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,UAAU,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1E,UAAU,CAAC,MAAM,CAAC,OAAO,GAAG,UAAU,CAAa;;YAC/C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACjB,MAAA,OAAO,CAAC,IAAI,wDAAG,4CAA4C,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;gBACnF,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;gBACtC,OAAO;aACV;YACD,IAAI,CAAC,CAAC,IAAI,KAAK,uBAAS,CAAC,eAAe,IAAI,oBAAoB,EAAE;gBAC9D,oBAAoB,EAAE,CAAC;aAC1B;iBAAM;gBACH,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;aAClB;QACL,CAAC,CAAC;QACF,UAAU,CAAC,MAAM,CAAC,OAAO,GAAG,UAAU,CAAa;;YAC/C,MAAA,OAAO,CAAC,IAAI,wDAAG,kBAAkB,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YACzD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAC,CAAC;QACF,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,YAAqB,IAAI;QAClC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAEtC,IAAI,IAAI,CAAC,UAAU,EAAE;gBACjB,IAAI,SAAS,EAAE;oBACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,mBAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;iBAE/C;qBAAM;oBACH,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;iBAC3B;aAEJ;iBAAM;gBACH,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,uBAAS,CAAC,SAAS,CAAC,CAAC;aAC5C;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAcM,SAAS,CACZ,IAA2C,EAC3C,QAAkC;QAElC,OAAO,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,QAAQ,CAAC,CAAC;IAChF,CAAC;IAEM,IAAI,CAAC,IAAqB,EAAE,OAAa;QAC5C,MAAM,YAAY,GAAa,CAAC,mBAAQ,CAAC,SAAS,CAAC,CAAC;QAEpD,IAAI,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;YAC3B,eAAM,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SAErC;aAAM;YACH,eAAM,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SACrC;QAED,IAAI,GAAe,CAAC;QAEpB,IAAI,OAAO,KAAK,SAAS,EAAE;YACvB,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACxC,GAAG,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;YAC/D,GAAG,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;YACzC,GAAG,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC;SAEzD;aAAM;YACH,GAAG,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC;SACtC;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAEM,SAAS,CAAC,IAAqB,EAAE,KAAiC;QACrE,MAAM,YAAY,GAAa,CAAC,mBAAQ,CAAC,eAAe,CAAC,CAAC;QAE1D,IAAI,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;YAC3B,eAAM,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SAErC;aAAM;YACH,eAAM,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SACrC;QAED,IAAI,GAAe,CAAC;QACpB,GAAG,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,MAAM,GAAG,CAAE,KAAyB,CAAC,UAAU,IAAK,KAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;QAClH,GAAG,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;QACzC,GAAG,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC;QAEpD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAED,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IACtC,CAAC;IAEM,kBAAkB;QACrB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACpB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC3B,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC;IACvC,CAAC;IAES,iBAAiB,CAAC,KAAmB;QAC3C,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;QACpD,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAEtB,IAAI,IAAI,KAAK,mBAAQ,CAAC,SAAS,EAAE;YAC7B,IAAI,MAAM,GAAG,CAAC,CAAC;YAEf,MAAM,iBAAiB,GAAG,IAAA,mBAAQ,EAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAClD,MAAM,IAAI,IAAA,qBAAU,EAAC,iBAAiB,CAAC,CAAC;YAExC,IAAI,CAAC,YAAY,GAAG,IAAA,mBAAQ,EAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC5C,MAAM,IAAI,IAAA,qBAAU,EAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAExC,mDAAmD;YACnD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBAClB,MAAM,UAAU,GAAG,IAAA,0BAAa,EAAC,IAAI,CAAC,YAAY,CAAC,CAAA;gBACnD,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;aACtC;YAED,IAAI,KAAK,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;gBACpD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;aAChD;YAED,IAAI,CAAC,iBAAiB,GAAG,GAAG,IAAI,CAAC,MAAM,IAAI,iBAAiB,EAAE,CAAC;YAE/D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YAErB,oCAAoC;YACpC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,mBAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;SAE9C;aAAM,IAAI,IAAI,KAAK,mBAAQ,CAAC,KAAK,EAAE;YAChC,MAAM,EAAE,GAAoB,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;YAE1C,MAAM,IAAI,GAAG,eAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACtC,MAAM,OAAO,GAAG,eAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAEzC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SAEtC;aAAM,IAAI,IAAI,KAAK,mBAAQ,CAAC,UAAU,EAAE;YACrC,IAAI,CAAC,KAAK,EAAE,CAAC;SAEhB;aAAM,IAAI,IAAI,KAAK,mBAAQ,CAAC,gBAAgB,EAAE;YAC3C,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;YAEzB,MAAM,OAAO,GAAa,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAU,CAAC,WAAW,CAAC,QAAQ,CAAC;YAClF,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,eAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;YAEnD,MAAM,OAAO,GAAW,IAAK,IAAY,EAAE,CAAC;YAC5C,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAE1B,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SAEvC;aAAM,IAAI,IAAI,KAAK,mBAAQ,CAAC,UAAU,EAAE;YACrC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,mBAAmB;YAClC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAExB;aAAM,IAAI,IAAI,KAAK,mBAAQ,CAAC,gBAAgB,EAAE;YAC3C,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,mBAAmB;YAClC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAErB;aAAM,IAAI,IAAI,KAAK,mBAAQ,CAAC,SAAS,EAAE;YACpC,MAAM,EAAE,GAAoB,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;YAE1C,MAAM,IAAI,GAAG,CAAC,eAAM,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBACxC,CAAC,CAAC,eAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC;gBAC1B,CAAC,CAAC,eAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAE/B,MAAM,OAAO,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC;gBACtC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC;gBACvC,CAAC,CAAC,SAAS,CAAC;YAEhB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SAEvC;aAAM,IAAI,IAAI,KAAK,mBAAQ,CAAC,eAAe,EAAE;YAC1C,MAAM,EAAE,GAAoB,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;YAE1C,MAAM,IAAI,GAAG,CAAC,eAAM,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBACxC,CAAC,CAAC,eAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC;gBAC1B,CAAC,CAAC,eAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAE/B,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACtE;IACL,CAAC;IAES,QAAQ,CAAC,YAAsB;QACrC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACvC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC1D,CAAC;IAES,KAAK,CAAC,WAAqB;QACjC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACnC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC1D,CAAC;IAEO,eAAe,CAAC,IAAqC,EAAE,OAAY;;QACvE,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAEpD,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;YAC5C,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;SAErD;aAAM,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAC3C,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SAEnD;aAAM;YACH,MAAA,OAAO,CAAC,IAAI,wDAAG,qDAAqD,IAAI,IAAI,CAAC,CAAC;SACjF;IACL,CAAC;IAEO,OAAO;QACX,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;SAC9B;IACL,CAAC;IAEO,oBAAoB,CAAC,IAAqC;QAC9D,QAAQ,OAAM,CAAC,IAAI,CAAC,EAAE;YAClB,gBAAgB;YAChB,KAAK,UAAU,CAAC,CAAC,OAAO,IAAK,IAAsB,CAAC,OAAO,EAAE,CAAC;YAE9D,SAAS;YACT,KAAK,QAAQ,CAAC,CAAC,OAAO,IAAI,CAAC;YAE3B,SAAS;YACT,KAAK,QAAQ,CAAC,CAAC,OAAO,IAAI,IAAI,EAAE,CAAC;YAEjC,OAAO,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SACrD;IACL,CAAC;CAEJ;AApSD,oBAoSC","sourcesContent":["import * as msgpack from './msgpack';\n\nimport { Connection } from './Connection';\nimport { Protocol, utf8Length, utf8Read } from './Protocol';\nimport { getSerializer, Serializer } from './serializer/Serializer';\n\n// The unused imports here are important for better `.d.ts` file generation\n// (Later merged with `dts-bundle-generator`)\nimport { createNanoEvents } from './core/nanoevents';\nimport { createSignal } from './core/signal';\n\nimport { Context, decode, encode, Schema } from '@colyseus/schema';\nimport { SchemaConstructor, SchemaSerializer } from './serializer/SchemaSerializer';\nimport { CloseCode } from './errors/ServerError';\n\nexport interface RoomAvailable<Metadata = any> {\n    name: string;\n    roomId: string;\n    clients: number;\n    maxClients: number;\n    metadata?: Metadata;\n}\n\nexport class Room<State= any> {\n    public roomId: string;\n    public sessionId: string;\n    public reconnectionToken: string;\n\n    public name: string;\n    public connection: Connection;\n\n    // Public signals\n    public onStateChange = createSignal<(state: State) => void>();\n    public onError = createSignal<(code: number, message?: string) => void>();\n    public onLeave = createSignal<(code: number) => void>();\n    protected onJoin = createSignal();\n\n    public serializerId: string;\n    public serializer: Serializer<State>;\n\n    protected hasJoined: boolean = false;\n\n    // TODO: remove me on 1.0.0\n    protected rootSchema: SchemaConstructor<State>;\n\n    protected onMessageHandlers = createNanoEvents();\n\n    constructor(name: string, rootSchema?: SchemaConstructor<State>) {\n        this.roomId = null;\n        this.name = name;\n\n        if (rootSchema) {\n            this.serializer = new (getSerializer(\"schema\"));\n            this.rootSchema = rootSchema;\n            (this.serializer as SchemaSerializer).state = new rootSchema();\n        }\n\n        this.onError((code, message) => console.warn?.(`colyseus.js - onError => (${code}) ${message}`));\n        this.onLeave(() => this.removeAllListeners());\n    }\n\n    // TODO: deprecate me on version 1.0\n    get id() { return this.roomId; }\n\n    public connect(\n        endpoint: string,\n        devModeCloseCallback?: () => void,\n        room: Room = this // when reconnecting on devMode, re-use previous room intance for handling events.\n    ) {\n        const connection = new Connection();\n        room.connection = connection;\n\n        connection.events.onmessage = Room.prototype.onMessageCallback.bind(room);\n        connection.events.onclose = function (e: CloseEvent) {\n            if (!room.hasJoined) {\n                console.warn?.(`Room connection was closed unexpectedly (${e.code}): ${e.reason}`);\n                room.onError.invoke(e.code, e.reason);\n                return;\n            }\n            if (e.code === CloseCode.DEVMODE_RESTART && devModeCloseCallback) {\n                devModeCloseCallback();\n            } else {\n                room.onLeave.invoke(e.code);\n                room.destroy();\n            }\n        };\n        connection.events.onerror = function (e: CloseEvent) {\n            console.warn?.(`Room, onError (${e.code}): ${e.reason}`);\n            room.onError.invoke(e.code, e.reason);\n        };\n        connection.connect(endpoint);\n    }\n\n    public leave(consented: boolean = true): Promise<number> {\n        return new Promise((resolve) => {\n            this.onLeave((code) => resolve(code));\n\n            if (this.connection) {\n                if (consented) {\n                    this.connection.send([Protocol.LEAVE_ROOM]);\n\n                } else {\n                    this.connection.close();\n                }\n\n            } else {\n                this.onLeave.invoke(CloseCode.CONSENTED);\n            }\n        });\n    }\n\n    public onMessage<T = any>(\n        type: \"*\",\n        callback: (type: string | number | Schema, message: T) => void\n    )\n    public onMessage<T extends (typeof Schema & (new (...args: any[]) => any))>(\n        type: T,\n        callback: (message: InstanceType<T>) => void\n    )\n    public onMessage<T = any>(\n        type: string | number,\n        callback: (message: T) => void\n    )\n    public onMessage(\n        type: '*' | string | number | typeof Schema,\n        callback: (...args: any[]) => void\n    ) {\n        return this.onMessageHandlers.on(this.getMessageHandlerKey(type), callback);\n    }\n\n    public send(type: string | number, message?: any): void {\n        const initialBytes: number[] = [Protocol.ROOM_DATA];\n\n        if (typeof(type) === \"string\") {\n            encode.string(initialBytes, type);\n\n        } else {\n            encode.number(initialBytes, type);\n        }\n\n        let arr: Uint8Array;\n\n        if (message !== undefined) {\n            const encoded = msgpack.encode(message);\n            arr = new Uint8Array(initialBytes.length + encoded.byteLength);\n            arr.set(new Uint8Array(initialBytes), 0);\n            arr.set(new Uint8Array(encoded), initialBytes.length);\n\n        } else {\n            arr = new Uint8Array(initialBytes);\n        }\n\n        this.connection.send(arr.buffer);\n    }\n\n    public sendBytes(type: string | number, bytes: number[] | ArrayBufferLike) {\n        const initialBytes: number[] = [Protocol.ROOM_DATA_BYTES];\n\n        if (typeof(type) === \"string\") {\n            encode.string(initialBytes, type);\n\n        } else {\n            encode.number(initialBytes, type);\n        }\n\n        let arr: Uint8Array;\n        arr = new Uint8Array(initialBytes.length + ((bytes as ArrayBufferLike).byteLength || (bytes as number[]).length));\n        arr.set(new Uint8Array(initialBytes), 0);\n        arr.set(new Uint8Array(bytes), initialBytes.length);\n\n        this.connection.send(arr.buffer);\n    }\n\n    public get state (): State {\n        return this.serializer.getState();\n    }\n\n    public removeAllListeners() {\n        this.onJoin.clear();\n        this.onStateChange.clear();\n        this.onError.clear();\n        this.onLeave.clear();\n        this.onMessageHandlers.events = {};\n    }\n\n    protected onMessageCallback(event: MessageEvent) {\n        const bytes = Array.from(new Uint8Array(event.data))\n        const code = bytes[0];\n\n        if (code === Protocol.JOIN_ROOM) {\n            let offset = 1;\n\n            const reconnectionToken = utf8Read(bytes, offset);\n            offset += utf8Length(reconnectionToken);\n\n            this.serializerId = utf8Read(bytes, offset);\n            offset += utf8Length(this.serializerId);\n\n            // Instantiate serializer if not locally available.\n            if (!this.serializer) {\n                const serializer = getSerializer(this.serializerId)\n                this.serializer = new serializer();\n            }\n\n            if (bytes.length > offset && this.serializer.handshake) {\n                this.serializer.handshake(bytes, { offset });\n            }\n\n            this.reconnectionToken = `${this.roomId}:${reconnectionToken}`;\n\n            this.hasJoined = true;\n            this.onJoin.invoke();\n\n            // acknowledge successfull JOIN_ROOM\n            this.connection.send([Protocol.JOIN_ROOM]);\n\n        } else if (code === Protocol.ERROR) {\n            const it: decode.Iterator = { offset: 1 };\n\n            const code = decode.number(bytes, it);\n            const message = decode.string(bytes, it);\n\n            this.onError.invoke(code, message);\n\n        } else if (code === Protocol.LEAVE_ROOM) {\n            this.leave();\n\n        } else if (code === Protocol.ROOM_DATA_SCHEMA) {\n            const it = { offset: 1 };\n\n            const context: Context = (this.serializer.getState() as any).constructor._context;\n            const type = context.get(decode.number(bytes, it));\n\n            const message: Schema = new (type as any)();\n            message.decode(bytes, it);\n\n            this.dispatchMessage(type, message);\n\n        } else if (code === Protocol.ROOM_STATE) {\n            bytes.shift(); // drop `code` byte\n            this.setState(bytes);\n\n        } else if (code === Protocol.ROOM_STATE_PATCH) {\n            bytes.shift(); // drop `code` byte\n            this.patch(bytes);\n\n        } else if (code === Protocol.ROOM_DATA) {\n            const it: decode.Iterator = { offset: 1 };\n\n            const type = (decode.stringCheck(bytes, it))\n                ? decode.string(bytes, it)\n                : decode.number(bytes, it);\n\n            const message = (bytes.length > it.offset)\n                ? msgpack.decode(event.data, it.offset)\n                : undefined;\n\n            this.dispatchMessage(type, message);\n\n        } else if (code === Protocol.ROOM_DATA_BYTES) {\n            const it: decode.Iterator = { offset: 1 };\n\n            const type = (decode.stringCheck(bytes, it))\n                ? decode.string(bytes, it)\n                : decode.number(bytes, it);\n\n            this.dispatchMessage(type, new Uint8Array(bytes.slice(it.offset)));\n        }\n    }\n\n    protected setState(encodedState: number[]): void {\n        this.serializer.setState(encodedState);\n        this.onStateChange.invoke(this.serializer.getState());\n    }\n\n    protected patch(binaryPatch: number[]) {\n        this.serializer.patch(binaryPatch);\n        this.onStateChange.invoke(this.serializer.getState());\n    }\n\n    private dispatchMessage(type: string | number | typeof Schema, message: any) {\n        const messageType = this.getMessageHandlerKey(type);\n\n        if (this.onMessageHandlers.events[messageType]) {\n            this.onMessageHandlers.emit(messageType, message);\n\n        } else if (this.onMessageHandlers.events['*']) {\n            this.onMessageHandlers.emit('*', type, message);\n\n        } else {\n            console.warn?.(`colyseus.js: onMessage() not registered for type '${type}'.`);\n        }\n    }\n\n    private destroy () {\n        if (this.serializer) {\n            this.serializer.teardown();\n        }\n    }\n\n    private getMessageHandlerKey(type: string | number | typeof Schema): string {\n        switch (typeof(type)) {\n            // typeof Schema\n            case \"function\": return `$${(type as typeof Schema)._typeid}`;\n\n            // string\n            case \"string\": return type;\n\n            // number\n            case \"number\": return `i${type}`;\n\n            default: throw new Error(\"invalid message type.\");\n        }\n    }\n\n}\n"]}